#!/usr/bin/env node

// Parse arguments
var args = process.argv.slice(2);
if (args.length !== 2) {
  console.error('usage: determine-gender people.ttl language.json');
  process.exit(1);
}
var fs = require('fs'),
    N3 = require('n3'),
    _ = require('lodash'),
    stream = require('stream'),
    request = require('request'),
    htmlparser = require('htmlparser2');

var workers = 4,
    minimumScore = 5,
    minimumDifferenceFactor = 2;

var FOAF = 'http://xmlns.com/foaf/0.1/';
var IGNORE = 1, TEXT = 2, TITLE = 3,
    modes = { 'script': IGNORE, 'style': IGNORE, 'h1': TITLE };
var analyzers = [scoreWithSignalWords];

var peopleFile = args[0],
    config = JSON.parse(fs.readFileSync(args[1]));

// Parse the configuration
config.allSignalWords = _.reduce(config.signalWords, function (all, scores) {
  _.each(scores, function (score, key) { all[key] = true; });
  return all;
}, {});

// Analyze all people
var people = createPeopleStream(peopleFile);
function analyzeNextPerson() {
  var person = people.read();
  if (!person) return people.once('readable', analyzeNextPerson);
  analyzePerson(person, function (error, person) {
    error ? console.error(error) : writePerson(person);
    analyzeNextPerson();
  });
};
while (workers-- > 0)
  analyzeNextPerson();
people.on('end', function () {Â process.exit(0); });

// Creates a stream of people objects
function createPeopleStream(file) {
  var reader = new N3.StreamParser();
  fs.createReadStream(peopleFile).pipe(reader);
  var people = new stream.Transform({ objectMode: true });
  people._transform = function (triple, encoding, done) {
    if (triple.predicate === FOAF + 'isPrimaryTopicOf')
      this.push({ url: triple.subject, page: triple.object });
    done();
  };
  reader.pipe(people);
  return people;
}

// Analyzes the given person
function analyzePerson(person, callback) {
  // Read the entire body
  var page = request(person.page, function (error, response, body) {
    if (error) return callback(error);
    person.html = body;
    person.text = bodyText.trim();
    person.name = title.trim();

    // Determine scores with all analyzers
    person.score = _.reduce(analyzers, function (all, analyze) {
      var score = analyze(person);
      for (var gender in score)
        all[gender] = (all[gender] || 0) + score[gender];
      return all;
    }, {});
    callback(null, person);
  }), bodyText = '', title = '';

  // Parse the text inside of the HTML
  var parser = new htmlparser.Parser({
    // Set the parsing mode according to the opening tag
    onopentag: function (tagName) {
      if (tagName in modes)
        mode = modes[tagName];
    },
    // Revert to text mode after a tag has been closed
    onclosetag: function (tagName) {
      mode = TEXT;
    },
    // Process a chunk of text, depending on the mode
    ontext: function (t) {
      if (mode === TEXT)
        bodyText += t.trim() + ' ';
      else if (mode === TITLE)
        title += t.trim() + ' ';
    },
  }), mode = TEXT;
  page.on('data', function (d) { parser.write(d); });
  page.on('end',  function ()  { parser.end(); });
}

// Assign gender scores based on signal words
function scoreWithSignalWords(person) {
  // Determine the number of occurrences per signal word
  var wordFinder = /\w+/g, match, signalWords = {};
  while (match = wordFinder.exec(person.text)) {
    var word = match[0].toLowerCase();
    if (word in config.allSignalWords)
      signalWords[word] = (signalWords[word] || 0) + 1;
  }
  // For each gender, calculate a score
  var genderScores = {};
  for (var gender in config.signalWords) {
    genderScores[gender] = 0;
    for (var word in config.signalWords[gender])
      genderScores[gender] += (signalWords[word] || 0) * config.signalWords[gender][word];
  }
  return genderScores;
}

// Writes the extracted information
function writePerson(person) {
  var scores = _.sortBy(_.map(person.score, function (value, key) {
    return { gender: key, score: value };
  }), 'score'), best = scores.pop(), second = scores.pop();

  // The score of the best alternative should be sufficiently high
  if (!best || best.score < minimumScore) return;
  // The score of the second-best alternative should be sufficiently different
  if (second && best.score < second.score * minimumDifferenceFactor) return;

  console.log('%s\t%s', person.name, best.gender);
}
